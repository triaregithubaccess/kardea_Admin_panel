// Generated by CoffeeScript 1.12.5
var _Users, export_default;

import axios from 'axios';

import MockAdapter from 'axios-mock-adapter';

import {
  LoginUsers,
  Users
} from './data/user';

_Users = Users;

export_default = {
  bootstrap: function() {
    var mock;
    mock = new MockAdapter(axios);
    mock.onGet('/success').reply(200, {
      msg: 'success'
    });
    mock.onGet('/error').reply(500, {
      msg: 'failure'
    });
    mock.onPost('/login').reply((function(_this) {
      return function(config) {
        var password, ref, username;
        ref = JSON.parse(config.data), username = ref.username, password = ref.password;
        return new Promise(function(resolve, reject) {
          var user;
          user = null;
          return setTimeout(function() {
            var hasUser;
            hasUser = LoginUsers.some(function(u) {
              if (u.username === username && u.password === password) {
                user = JSON.parse(JSON.stringify(u));
                user.password = void 0;
                return true;
              }
            });
            if (hasUser) {
              return resolve([
                200, {
                  code: 200,
                  msg: '请求成功',
                  user: user
                }
              ]);
            } else {
              return resolve([
                200, {
                  code: 500,
                  msg: '账号或密码错误'
                }
              ]);
            }
          }, 1000);
        });
      };
    })(this));
    mock.onGet('/user/list').reply((function(_this) {
      return function(config) {
        var mockUsers, name;
        name = config.params.name;
        mockUsers = _Users.filter(function(user) {
          if (name && user.name.indexOf(name) === -1) {
            return false;
          }
          return true;
        });
        return new Promise(function(resolve, reject) {
          return setTimeout(function() {
            return resolve([
              200, {
                users: mockUsers
              }
            ]);
          }, 1000);
        });
      };
    })(this));
    mock.onGet('/user/listpage').reply((function(_this) {
      return function(config) {
        var mockUsers, name, page, ref, total;
        console.log("in MOCK -user-listPgae!!---->>");
        ref = config.params, page = ref.page, name = ref.name;
        mockUsers = _Users.filter(function(user) {
          if (name && user.name.indexOf(name) === -1) {
            return false;
          }
          return true;
        });
        total = mockUsers.length;
        mockUsers = mockUsers.filter(function(u, index) {
          return index < 20 * page && index >= 20 * (page - 1);
        });
        return new Promise(function(resolve, reject) {
          return setTimeout(function() {
            return resolve([
              200, {
                total: total,
                users: mockUsers
              }
            ]);
          }, 1000);
        });
      };
    })(this));
    mock.onGet('/user/remove').reply((function(_this) {
      return function(config) {
        var id;
        id = config.params.id;
        _Users = _Users.filter(function(u) {
          return u.id !== id;
        });
        return new Promise(function(resolve, reject) {
          return setTimeout(function() {
            return resolve([
              200, {
                code: 200,
                msg: '删除成功'
              }
            ]);
          }, 500);
        });
      };
    })(this));
    mock.onGet('/user/batchremove').reply((function(_this) {
      return function(config) {
        var ids;
        ids = config.params.ids;
        ids = ids.split(',');
        _Users = _Users.filter(function(u) {
          return !ids.includes(u.id);
        });
        return new Promise(function(resolve, reject) {
          return setTimeout(function() {
            return resolve([
              200, {
                code: 200,
                msg: '删除成功'
              }
            ]);
          }, 500);
        });
      };
    })(this));
    mock.onGet('/user/edit').reply((function(_this) {
      return function(config) {
        var addr, age, birth, id, name, ref, sex;
        ref = config.params, id = ref.id, name = ref.name, addr = ref.addr, age = ref.age, birth = ref.birth, sex = ref.sex;
        _Users.some(u(function() {
          if (u.id === id) {
            u.name = name;
            u.addr = addr;
            u.age = age;
            u.birth = birth;
            u.sex = sex;
            return true;
          }
        }));
        return new Promise(function(resolve, reject) {
          return setTimeout(function() {
            return resolve([
              200, {
                code: 200,
                msg: '编辑成功'
              }
            ]);
          }, 500);
        });
      };
    })(this));
    return mock.onGet('/user/add').reply((function(_this) {
      return function(config) {
        var addr, age, birth, name, ref, sex;
        ref = config.params, name = ref.name, addr = ref.addr, age = ref.age, birth = ref.birth, sex = ref.sex;
        _Users.push({
          name: name,
          addr: addr,
          age: age,
          birth: birth,
          sex: sex
        });
        return new Promise(function(resolve, reject) {
          return setTimeout(function() {
            return resolve([
              200, {
                code: 200,
                msg: '新增成功'
              }
            ]);
          }, 500);
        });
      };
    })(this));
  }
};

export default export_default;;

//# sourceMappingURL=mock.js.map
